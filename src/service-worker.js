/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// eslint-disable-next-line no-underscore-dangle
precacheAndRoute(self.__WB_MANIFEST);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

/**
 * The url pointing to an image?
 *
 * @param url
 * @param request
 * @returns {boolean}
 */
function isImage(url, request) {
  let result = request.destination === 'image';

  const pathnameExtension = url.pathname.split('.')[1] ?? null;

  if (pathnameExtension !== null) {
    if (['png', 'jpeg', 'jpg', 'gif', 'bmp'].includes(pathnameExtension)) {
      result = true;
    }
  }

  return result;
}

/**
 * The url pointing to a video?
 *
 * @param url
 * @param request
 * @returns {boolean}
 */
function isVideo(url, request) {
  let result = request.destination === 'video';

  const pathnameExtension = url.pathname.split('.')[1] ?? null;
  if (pathnameExtension !== null) {
    if (['mp4', 'webm'].includes(pathnameExtension)) {
      result = true;
    }
  }

  return result;
}

/**
 * Should the file be cached as other?
 *
 * @param url
 * @param request
 * @returns {boolean}
 */
function isOther(url, request) {
  let result = !isImage(url, request) && !isVideo(url, request);

  const pathnameExtension = url.pathname.split('.')[1] ?? null;
  if (pathnameExtension === 'json' && url.pathname !== '/manifest.json') {
    result = false;
  }

  return result;
}

// Cache images.
registerRoute(
  ({ url, request }) => isImage(url, request),
  new CacheFirst({
    cacheName: 'images'
  })
);

// Cache videos.
registerRoute(
  ({ url, request }) => isVideo(url, request),
  new CacheFirst({
    cacheName: 'videos'
  })
);

// Cache other resources.
registerRoute(
  ({ url, request }) => {
    return isOther(url, request);
  },
  new CacheFirst({
    cacheName: 'other'
  })
);
